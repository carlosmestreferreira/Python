from flask import Flask, render_template_string, request
from binance.client import Client
import pandas as pd
from secrets_1 import api_key, api_secret

# Inicializa o cliente da Binance
client = Client(api_key, api_secret)

# Inicializa o Flask
app = Flask(__name__)

@app.route('/', methods=['GET'])
def index():
    # Obtém os símbolos de futuros da Binance
    futures_exchange_info = client.futures_exchange_info()
    symbols_prices = []

    # Obtém os símbolos e seus respectivos preços
    for symbol_info in futures_exchange_info['symbols']:
        symbol = symbol_info['symbol']
        try:
            ticker = client.futures_symbol_ticker(symbol=symbol)
            price = ticker['price']
            symbols_prices.append((symbol, price))
        except Exception as e:
            symbols_prices.append((symbol, 'Erro ao obter o preço'))

    # Gera a lista em HTML
    html_template = '''
    <!doctype html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Binance Futuros Activos e Preços</title>
    </head>
    <body>
        <h1>Lista de Activos de Futuros da Binance com Preços</h1>
        <table border="1">
            <thead>
                <tr>
                    <th>Ativo</th>
                    <th>Preço</th>
                </tr>
            </thead>
            <tbody>
                {% for symbol, price in symbols_prices %}
                    <tr>
                        <td>{{ symbol }}</td>
                        <td>{{ price }}</td>
                    </tr>
                {% endfor %}
            </tbody>
        </table>
    </body>
    </html>
    '''

    # Renderiza o template com a lista de símbolos e preços
    return render_template_string(html_template, symbols_prices=symbols_prices)

if __name__ == '__main__':
    app.run(debug=True)
