from secrets_1 import api_key, api_secret
import os
from binance.client import Client
import pandas as pd
from flask import Flask, render_template_string

# Inicializa o cliente da Binance
client = Client(api_key, api_secret)

# Obtém todos os tickers de futures
futures_tickers = client.futures_ticker()

# Converte a lista de tickers de futures para um DataFrame
df = pd.DataFrame(futures_tickers)

# Filtra o DataFrame para incluir apenas as colunas 'symbol' e 'lastPrice'
df_filtered = df[['symbol', 'lastPrice']]

# Adiciona um link ao nome do símbolo para redirecionar ao gráfico na Binance
df_filtered['symbol'] = df_filtered['symbol'].apply(
    lambda x: f'<a href="https://www.binance.com/en/futures/{x}" target="_blank">{x}</a>'
)

# Converte o DataFrame filtrado para HTML
html_table = df_filtered.to_html(index=False, escape=False)

# Cria a aplicação Flask
app = Flask(__name__)

# Rota principal que irá exibir a tabela HTML
@app.route('/')
def index():
    return render_template_string("""
        <html>
            <head><title>Binance Futures Tickers</title></head>
            <body>
                <h1>Binance Futures Tickers</h1>
                {{ table|safe }}
            </body>
        </html>
    """, table=html_table)

if __name__ == '__main__':
    # Roda o servidor na porta 5000
    app.run(host='0.0.0.0', port=5000)
